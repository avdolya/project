from enum import Enum
from fastapi import APIRouter, Request, Query, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from starlette.responses import HTMLResponse
from starlette.templating import Jinja2Templates
from yandexgptlite import YandexGPTLite
from my_package.core.database import db_helper
from my_package.crud_package.place import get_all_places_for_assistant, load_secrets
secrets = load_secrets()
templates = Jinja2Templates(directory="frontend/templates")
YANDEX_FOLDER_ID = secrets.get('YANDEX_FOLDER_ID')
YANDEX_API_KEY = secrets.get('YANDEX_API_KEY')
account= YandexGPTLite(YANDEX_FOLDER_ID, YANDEX_API_KEY)
router = APIRouter(prefix="/assistant", tags=["Assistant"])
async def get_db() -> AsyncSession:
    async with db_helper.session_factory() as session:
        yield session



CATEGORY_TRANSLATION = {
    "walk": "–ü—Ä–æ–≥—É–ª–∫–∏",
    "theatre": "–¢–µ–∞—Ç—Ä—ã",
    "museum": "–ú—É–∑–µ–∏",
    "food": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"
}


@router.get("/recommend")
async def assistant_recommend(
        request: Request,
        type: str = Query(...),
        db: AsyncSession = Depends(get_db)
):
    places = await get_all_places_for_assistant(
        db,
        type,
        min_rating = 0.0,
    )

    if not places:
        return '–ú–µ—Å—Ç –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

    places_info = "\n".join(
        [f"{p.id}: {p.name} (–†–µ–π—Ç–∏–Ω–≥: {p.average_rating}) - {p.description[:100]}..."
         for p in places]
    )


    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{type}'. "
        f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç —Å –∏—Ö ID, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º:\n{places_info}\n\n"
        "–í—ã–±–µ—Ä–∏ –û–î–ù–û —Å–∞–º–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–º—É —Ç—É—Ä–∏—Å—Ç—É. "
        "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û ID —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤."
    )


    try:
        gpt_response = account.create_completion(
            prompt,
            '0.6'
        )
        print(f"YandexGPT response: {gpt_response}")
        place_id = int(gpt_response.strip())
    except (ValueError, TypeError):
        place_id = places[0].id

    recommended_place = next((p for p in places if p.id == place_id), places[0])
    place_url = f"http://localhost:8000/places/{place_id}"
    russian_type = CATEGORY_TRANSLATION.get(type, type)

    description_prompt = (
        f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ '{recommended_place.name}' "
        f"–¥–ª—è —Ç—É—Ä–∏—Å—Ç–∞. –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {recommended_place.description[:200]}"
    )


    place_description = account.create_completion(
        description_prompt,
        '0.6'
    )


    html_content = f"""
        <div class="recommendation">
            <p style = "margin-top: 10px">–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {russian_type} —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–µ—Ç–∏—Ç—å:</p>
            <p>üèÜ <strong>{recommended_place.name}</strong></p>
            <p>‚≠ê –†–µ–π—Ç–∏–Ω–≥: {recommended_place.average_rating}</p>
            <div class="description">{place_description}</div>
            <a href="{place_url}" class="cta-btn">
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–µ—Å—Ç—É
            </a>
        </div>
        """

    return HTMLResponse(html_content)
